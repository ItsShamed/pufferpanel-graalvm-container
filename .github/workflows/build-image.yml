name: Build and publish Docker image

on:
  push:
  schedule:
    - cron: "0 0 * * 0"
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-changed-files:
    runs-on: ubuntu-latest

    outputs:
      files_changed: ${{ steps.check.outputs.changed }}
    
    steps:
      - if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: files
        if: github.event_name == 'push'
        name: Verify Changed files
        uses:  tj-actions/changed-files@v29.0.4

      - id: check
        if: github.event_name == 'push'
        name: Check if files changed
        run: |
          echo "Pattern: Dockerfile|.*\.yml|.*\.sh"
          for file in ${{ steps.files.outputs.all_changed_files }}; do
            echo $file
            if echo $file | grep -P "Dockerfile|.*\.yml|.*\.sh"; then
              echo "$file has been changed"
              echo "::set-output name=changed::true"
              exit 0
            fi
          done
          echo "No file found"
          echo "::set-output name=changed::false"


  build-base-image:
    name: Build base image
    needs: check-changed-files
    if: | 
      github.event_name == 'schedule' 
      || github.event_name == 'workflow_dispatch' 
      || needs.check-changed-files.outputs.files_changed == 'true'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [ "linux/amd64", "linux/arm64" ]

    steps:
      - name: Checkout Pufferpanel repo
        uses: actions/checkout@v3
        with:
          repository: 'pufferpanel/pufferpanel'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: ${{ matrix.platform }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            base

      - name: Build and push Docker image
        uses: docker/build-push-action@v3.1.1
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  get-graalvm-release:
    needs: check-changed-files
    if: | 
      github.event_name == 'schedule' 
      || github.event_name == 'workflow_dispatch' 
      || needs.check-changed-files.outputs.files_changed == 'true'
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.tag.outputs.tag }}

    steps:
      - id: release
        name: Check latest GraalVM release
        run: "echo \"::set-output name=release::$(curl -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/graalvm/graalvm-ce-builds/releases/latest | tr -d '\\n' | tr -d '\\t')\""

      - id: tag
        name: Retrieve latest tag
        run: "echo \"::set-output name=tag::$(echo ${{ fromJSON(steps.release.outputs.release).tag_name }} | cut -d '-' -f 2)\""

  build-all-bundle:
    name: Build massive image
    needs: 
      - check-changed-files
      - get-graalvm-release
      - build-base-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      GRAALVM_VERSION: ${{ needs.get-graalvm-release.outputs.version }}

    strategy:
      matrix:
        platform: [ "linux/amd64", "linux/arm64" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get the version
        run: echo "GRAALVM_VERSION=${{ needs.get-graalvm-release.outputs.version }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2*
        with:
          platforms: ${{ matrix.platform }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            latest
            all-graalvm-${{ env.GRAALVM_VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: all
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            GRAALVM_VERSION: ${{ env.GRAALVM_VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
    

  build-java:
    name: Build Java image
    needs: 
      - check-changed-files
      - get-graalvm-release
      - build-base-image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      GRAALVM_VERSION: ${{ needs.get-graalvm-release.outputs.version }}

    strategy:
      matrix:
        platform: [ "linux/amd64", "linux/arm64" ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: ${{ matrix.platform }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.0.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            java
            java-graalvm-${{ env.GRAALVM_VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: java
          platforms: ${{ matrix.platform }}
          build-args: |
            GRAALVM_VERSION: ${{ env.GRAALVM_VERSION }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
